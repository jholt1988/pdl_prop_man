// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id          Int           @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String        
  phone       String
  ssn         String
  leases      Lease[]
  Transaction Transaction[]
}

model Property {
  id            Int             @id @default(autoincrement())
  name          String
  address       String
  numUnits      Int
  units         Unit[]
  Lease         Lease[]
  RepairRequest RepairRequest[]
}

model Unit {
  id             Int             @id @default(autoincrement())
  unitNumber     Int
  sqft           String
  bedrooms       Int
  bathrooms      Int
  propertyStatus String
  propertyId     Int
  property       Property        @relation(fields: [propertyId], references: [id])
  leases         Lease[]
  RepairRequest  RepairRequest[]
}

model Lease {
  id          Int           @id @default(autoincrement())
  termOfLease String
  beginDate   DateTime
  endDate     DateTime
  monthlyRent Float
  deposit     Float
  petDeposit  Float
  tenantId    Int
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  propertyId  Int
  property    Property      @relation(fields: [propertyId], references: [id])
  unitId      Int
  unit        Unit          @relation(fields: [unitId], references: [id])
  utilities   Utilities     @relation(fields: [utilitiesId], references: [id])
  utilitiesId Int           @unique
  Transaction Transaction[]
}

model Utilities {
  id       Int     @id @default(autoincrement())
  electric Boolean
  gas      Boolean
  water    Boolean
  leaseId  Int
  lease    Lease?
}

model RepairRequest {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String
  issue      String
  image      String?
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     Int
  status     String
  vendorId   Int
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
}

model Vendor {
  id             Int             @id @default(autoincrement())
  name           String
  email          String
  phone          String
  address        String
  repairRequests RepairRequest[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  tenantId    Int
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  leaseId     Int
  lease       Lease    @relation(fields: [leaseId], references: [id])
  description String
  amount      Float
  date        DateTime
}

model Expense {
  id          Int      @id @default(autoincrement())
  description String
  category    String
  amount      Float
  date        DateTime

}
